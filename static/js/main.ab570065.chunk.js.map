{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","name","email","className","href","TodoInfo","title","id","completed","user","classNames","TodoList","todos","map","todo","key","username","userId","initialData","todosFromServer","usersFromServer","find","App","useState","todosToRender","setTodosToRender","newTitle","setNewTitle","selectedUserId","setSelectedUserId","errTitle","setErrTitle","errUser","setErrUser","action","method","onSubmit","event","preventDefault","newTodo","reduce","max","updatedTodos","push","todoUpdater","type","placeholder","value","onChange","target","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab570065.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../types/User';\n\nexport const UserInfo: React.FC<User> = ({ name, email }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TodoForRender } from '../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo: React.FC<TodoForRender> = ({\n  title,\n  id,\n  completed,\n  user,\n}) => {\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo {...user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoForRender } from '../types/Todo';\n\ntype Props = {\n  todos: TodoForRender[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo {...todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n\nexport default React.memo(TodoList);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/types/User';\nimport { Todo, TodoForRender } from './components/types/Todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst initialData = (): TodoForRender[] => {\n  return (\n    todosFromServer.map((todo: Todo) => {\n      return ({\n        ...todo,\n        user: usersFromServer\n          .find((user: User) => user.id === todo.userId) || null,\n      });\n    })\n  );\n};\n\nexport const App = () => {\n  const [todosToRender, setTodosToRender] = useState(initialData);\n  const [newTitle, setNewTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [errTitle, setErrTitle] = useState(false);\n  const [errUser, setErrUser] = useState(false);\n\n  const todoUpdater = () => {\n    const maxId = todosToRender.reduce((max, { id }) => {\n      return (max < id) ? id : max;\n    }, 0);\n\n    const newTodo: TodoForRender = {\n      id: (maxId + 1),\n      title: newTitle,\n      completed: false,\n      userId: +selectedUserId,\n      user: usersFromServer\n        .find((user: User) => user.id === +selectedUserId) || null,\n    };\n\n    const updatedTodos = todosToRender.map(todo => ({ ...todo }));\n\n    updatedTodos.push(newTodo);\n\n    setTodosToRender(updatedTodos);\n    setNewTitle('');\n    setSelectedUserId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitle) {\n      setErrTitle(true);\n    }\n\n    if (!selectedUserId) {\n      setErrUser(true);\n    }\n\n    if (selectedUserId && newTitle) {\n      todoUpdater();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTitle}\n              onChange={(event) => {\n                setNewTitle(event.target.value);\n                setErrTitle(false);\n              }}\n            />\n\n            {errTitle && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n              onChange={(event) => {\n                setSelectedUserId(event.target.value);\n                setErrUser(false);\n              }}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n\n              {usersFromServer.map(person => (\n                <option\n                  value={person.id}\n                  key={person.id}\n                >\n                  {person.name}\n                </option>\n              ))}\n            </select>\n\n            {errUser && (\n              <span className=\"error\">Please choose a user</span>\n            )}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosToRender} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}